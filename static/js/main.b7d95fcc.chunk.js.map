{"version":3,"sources":["logo.svg","App.js","registerServiceWorker.js","redux.js","sagas.js","index.js"],"names":["App","this","props","fetching","dog","onRequestDog","error","className","src","logo","alt","disabled","onClick","style","color","Component","connect","state","dispatch","type","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","API_CALL_REQUEST","API_CALL_SUCCESS","API_CALL_FAILURE","initialState","watcherSaga","workerSaga","takeLatest","fetchDog","axios","method","url","call","response","data","message","put","sagaMiddleware","createSagaMiddleware","reduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","action","compose","applyMiddleware","run","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b7d95fcc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n  render() {\n    const { fetching, dog, onRequestDog, error } = this.props;\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={dog || logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to Dog Saga</h1>\n        </header>\n\n        {dog ? (\n          <p className=\"App-intro\">Keep clicking for new dogs</p>\n        ) : (\n          <p className=\"App-intro\">Replace the React icon with a dog!</p>\n        )}\n\n        {fetching ? (\n          <button disabled>Fetching...</button>\n        ) : (\n          <button onClick={onRequestDog}>Request a Dog</button>\n        )}\n\n        {error && <p style={{ color: \"red\" }}>Uh oh - something went wrong!</p>}\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    fetching: state.fetching,\n    dog: state.dog,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onRequestDog: () => dispatch({ type: \"API_CALL_REQUEST\" })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n  \r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n  \r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n  \r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","// action types\r\nconst API_CALL_REQUEST = \"API_CALL_REQUEST\";\r\nconst API_CALL_SUCCESS = \"API_CALL_SUCCESS\";\r\nconst API_CALL_FAILURE = \"API_CALL_FAILURE\";\r\n\r\n// reducer with initial state\r\nconst initialState = {\r\n  fetching: false,\r\n  dog: null,\r\n  error: null\r\n};\r\n\r\nexport function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case API_CALL_REQUEST:\r\n      return { ...state, fetching: true, error: null };\r\n    case API_CALL_SUCCESS:\r\n      return { ...state, fetching: false, dog: action.dog };\r\n    case API_CALL_FAILURE:\r\n      return { ...state, fetching: false, dog: null, error: action.error };\r\n    default:\r\n      return state;\r\n  }\r\n}","import { takeLatest, call, put } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\n// watcher saga: watches for actions dispatched to the store, starts worker saga\r\nexport function* watcherSaga() {\r\n  yield takeLatest(\"API_CALL_REQUEST\", workerSaga);\r\n}\r\n\r\n// function that makes the api request and returns a Promise for response\r\nfunction fetchDog() {\r\n  return axios({\r\n    method: \"get\",\r\n    url: \"https://dog.ceo/api/breeds/image/random\"\r\n  });\r\n}\r\n\r\n// worker saga: makes the api call when watcher saga sees the action\r\nfunction* workerSaga() {\r\n  try {\r\n    const response = yield call(fetchDog);\r\n    const dog = response.data.message;\r\n\r\n    // dispatch a success action to the store with the new dog\r\n    yield put({ type: \"API_CALL_SUCCESS\", dog });\r\n  \r\n  } catch (error) {\r\n    // dispatch a failure action to the store with the error\r\n    yield put({ type: \"API_CALL_FAILURE\", error });\r\n  }\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { Provider } from \"react-redux\";\n\nimport { reducer } from \"./redux\";\nimport { watcherSaga } from \"./sagas\";\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// dev tools middleware\nconst reduxDevTools =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\n// create a redux store with our reducer above and middleware\nlet store = createStore(\n  reducer,\n  compose(applyMiddleware(sagaMiddleware), reduxDevTools)\n);\n\n// run the saga\nsagaMiddleware.run(watcherSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}